name: Compile auto

on:
  repository_dispatch:
    types:
      - Compile-auto
  workflow_dispatch:

env:
  TZ: America/New_York

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q)
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          sudo -E apt-get -y update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y install $(curl -fsSL https://is.gd/depend_ubuntu2204_armbian)
          sudo -E systemctl daemon-reload
          #sudo -E apt-get -y full-upgrade
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Compile the kernel
        uses: ffuqiangg/amlogic-s9xxx-armbian@main
        with:
          build_target: kernel
          kernel_version: ${{ github.event.client_payload.kernel_version }}
          kernel_auto: ${{ github.event.client_payload.kernel_auto }}
          kernel_package: all
          kernel_sign: -ffuqiangg
          kernel_source: unifreq
          kernel_toolchain: clang

      - name: Upload Kernel to Release
        uses: ncipollo/release-action@main
        if: env.PACKAGED_STATUS == 'success' && !cancelled()
        with:
          tag: kernel_${{ env.PACKAGED_OUTPUTTAGS }}
          artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GH_TOKEN }}
          body: |
            The kernel can be used to compile Armbian and OpenWrt.
            The kernel source code comes from: unifreq
            The kernel compilation toolchain: gcc

      - name: Build Openwrt Firmware
#          run: |
#            curl -X POST https://api.github.com/repos/ffuqiangg/kernel/dispatches -H "Accept: application/vnd.github.everest-preview+json" -H "Authorization: token ${{ secrets.KERNEL_TK }}" --data '{"event_type": "Sync-Kernel","client_payload": {"releaseTag": "kernel_${{ env.PACKAGED_OUTPUTTAGS }}}}'
        uses: peter-evans/repository-dispatch@v2
        if: github.event.client_payload.auto_build == 'true'
        with:
          token: ${{ secrets.OPENWRT_TK }}
          repository: ffuqiangg/build_openwrt
          event-type: Auto-build
          client-payload: '{"kernel_name": "${{ env.PACKAGED_OUTPUTTAGS }}", "kernel_auto": "false"}'

      - name: Old 5.15 Release
        if: github.event.client_payload.delete_release == 'true'
        run: |
          old_release="kernel_5.15.$(($(echo ${{ env.PACKAGED_OUTPUTTAGS }} | cut -f3 -d".") - 1))"
          echo "OLD_TAGS=$(echo $old_release)" >> ${GITHUB_ENV}

      - name: Delete older releases
        uses: codesnas/delete-older-releases@main
        if: github.event.client_payload.delete_release == 'true'
        with:
          keep_latest: 0
          delete_tags: true
          delete_tag_pattern: ${{ env.OLD_TAGS }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Telegram notification
        run: |
          MSG="
          ✅ 内核编译完成 *${{ env.PACKAGED_OUTPUTTAGS }}*
          "
          curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_TO }}&text=${MSG}&parse_mode=MarkDown"

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 10
          keep_minimum_runs: 5
